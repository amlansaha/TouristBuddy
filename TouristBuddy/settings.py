"""
Django settings for TouristBuddy project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
#from django.contrib.auth.models import User, check_password
#from .models import Users

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!&i)pq*p7*ij6n*3lsk@+fhr4aso(i0jy$5_yh#nxwnp1wpung'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Tour',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'TouristBuddy.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TouristBuddy.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.oracle',
        'NAME': 'xe',
        'USER': 'tourism',
        'PASSWORD': 'tourism',
        'HOST':'',
        'PORT':'',
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
AUTH_USER_MODEL = 'Tour.Users'

#class SettingsBackend(object):
#    """
#    Authenticate against the settings ADMIN_LOGIN and ADMIN_PASSWORD.

#    Use the login name, and a hash of the password. For example:

#    ADMIN_LOGIN = 'admin'
#    ADMIN_PASSWORD = 'sha1$4e987$afbcf42e21bd417fb71db8c66b321e9fc33051de'
#    """

#    def authenticate(self, user_email=None, password=None):
#        login_valid = (settings.ADMIN_LOGIN == user_email)
#        pwd_valid = check_password(password, settings.ADMIN_PASSWORD)
#        if login_valid and pwd_valid:
#            try:
#                user = User.objects.get(username=username)
#            except User.DoesNotExist:
#                # Create a new user. Note that we can set password
#                # to anything, because it won't be checked; the password
#                # from settings.py will.
#                user = User(username=username, password='get from settings.py')
#                user.is_staff = True
#                user.is_superuser = True
#                user.save()
#            return user
#        return None

#    def get_user(self, user_id):
#        try:
#            return User.objects.get(pk=user_id)
#        except User.DoesNotExist:
#            return None
